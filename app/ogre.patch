diff -r dd30349ea667 CMake/toolchain/android.toolchain.cmake
--- a/CMake/toolchain/android.toolchain.cmake	Sun Dec 01 11:28:12 2013 -0600
+++ b/CMake/toolchain/android.toolchain.cmake	Mon Dec 11 19:26:55 2017 +0100
@@ -361,7 +361,7 @@
  set( ANDROID_NDK_HOST_SYSTEM_NAME "windows" )
  set( TOOL_OS_SUFFIX ".exe" )
 elseif( CMAKE_HOST_UNIX )
- set( ANDROID_NDK_HOST_SYSTEM_NAME "linux-x86" )
+ set( ANDROID_NDK_HOST_SYSTEM_NAME "linux-x86_64" )
 else()
  message( FATAL_ERROR "Cross-compilation on your platform is not supported by this cmake toolchain" )
 endif()
@@ -687,8 +687,8 @@
    set( __stlIncludePath "${ANDROID_NDK}/sources/cxx-stl/gnu-libstdc++/${ANDROID_COMPILER_VERSION}/include" )
    set( __stlLibPath "${ANDROID_NDK}/sources/cxx-stl/gnu-libstdc++/${ANDROID_COMPILER_VERSION}/libs/${ANDROID_NDK_ABI_NAME}" )
   else()
-   set( __stlIncludePath "${ANDROID_NDK}/sources/cxx-stl/gnu-libstdc++/include" )
-   set( __stlLibPath "${ANDROID_NDK}/sources/cxx-stl/gnu-libstdc++/libs/${ANDROID_NDK_ABI_NAME}" )
+   set( __stlIncludePath "${ANDROID_NDK}/sources/cxx-stl/gnu-libstdc++/4.9/include" )
+   set( __stlLibPath "${ANDROID_NDK}/sources/cxx-stl/gnu-libstdc++/4.9/libs/${ANDROID_NDK_ABI_NAME}" )
   endif()
  endif()
 endif()
@@ -732,7 +732,7 @@
 set( LIBRARY_OUTPUT_PATH "${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME}" CACHE PATH "path for android libs" )
 
 #includes
-list( APPEND ANDROID_SYSTEM_INCLUDE_DIRS "${ANDROID_SYSROOT}/usr/include" "${ANDROID_NDK}/sources/cpufeatures")
+list( APPEND ANDROID_SYSTEM_INCLUDE_DIRS "${ANDROID_SYSROOT}/usr/include" "${ANDROID_NDK}/sources/android/cpufeatures")
 if( __stlIncludePath AND EXISTS "${__stlIncludePath}" )
  list( APPEND ANDROID_SYSTEM_INCLUDE_DIRS "${__stlIncludePath}" )
 endif()
diff -r dd30349ea667 OgreMain/src/OgreProgressiveMeshGenerator.cpp
--- a/OgreMain/src/OgreProgressiveMeshGenerator.cpp	Sun Dec 01 11:28:12 2013 -0600
+++ b/OgreMain/src/OgreProgressiveMeshGenerator.cpp	Mon Dec 11 19:26:55 2017 +0100
@@ -257,6 +257,17 @@
 	}
 }
 
+// Force instantiation, needed in OgreQueuedProgressiveMeshGenerator.cpp, PMWorker::addIndexBuffer
+// but we can't guarrantee that it is not inlined
+template void ProgressiveMeshGenerator::addIndexDataImpl(unsigned short* iPos, const unsigned short* iEnd,
+                                                         VertexLookupList& lookup,
+                                                         unsigned short submeshID);
+template void ProgressiveMeshGenerator::addIndexDataImpl(unsigned int* iPos, const unsigned int* iEnd,
+                                                         VertexLookupList& lookup,
+                                                         unsigned short submeshID);
+  
+
+  
 void ProgressiveMeshGenerator::addIndexData(IndexData* indexData, bool useSharedVertexLookup, unsigned short submeshID)
 {
 	const HardwareIndexBufferSharedPtr& ibuf = indexData->indexBuffer;
diff -r dd30349ea667 RenderSystems/GLES2/include/OgreGLES2FBORenderTexture.h
--- a/RenderSystems/GLES2/include/OgreGLES2FBORenderTexture.h	Sun Dec 01 11:28:12 2013 -0600
+++ b/RenderSystems/GLES2/include/OgreGLES2FBORenderTexture.h	Mon Dec 11 19:26:55 2017 +0100
@@ -116,6 +116,8 @@
         
         /** Detects all supported fbo's and recreates the tempory fbo */
         void _reload();
+
+        void setDefaultFBO(uint32 fbo);
         
     private:
         /** Frame Buffer Object properties for a certain texture format.
@@ -194,6 +196,7 @@
         /** Temporary FBO identifier
          */
         GLuint mTempFBO;
+        GLuint mDefaultFBO;
         
         /** Detect allowed FBO formats */
         void detectFBOFormats();
diff -r dd30349ea667 RenderSystems/GLES2/include/OgreGLES2RenderSystem.h
--- a/RenderSystems/GLES2/include/OgreGLES2RenderSystem.h	Sun Dec 01 11:28:12 2013 -0600
+++ b/RenderSystems/GLES2/include/OgreGLES2RenderSystem.h	Mon Dec 11 19:26:55 2017 +0100
@@ -516,6 +516,8 @@
             /// @copydoc RenderSystem::markProfileEvent
             virtual void markProfileEvent( const String &eventName );
 
+            void setDefaultFBO(uint32 fbo);
+
 #if OGRE_PLATFORM == OGRE_PLATFORM_ANDROID
             void resetRenderer(RenderWindow* pRenderWnd);
         
diff -r dd30349ea667 RenderSystems/GLES2/src/EGL/Android/OgreAndroidEGLWindow.cpp
--- a/RenderSystems/GLES2/src/EGL/Android/OgreAndroidEGLWindow.cpp	Sun Dec 01 11:28:12 2013 -0600
+++ b/RenderSystems/GLES2/src/EGL/Android/OgreAndroidEGLWindow.cpp	Mon Dec 11 19:26:55 2017 +0100
@@ -44,6 +44,8 @@
 #include <algorithm>
 #include <climits>
 
+#include "android/native_window.h"
+
 namespace Ogre {
 	AndroidEGLWindow::AndroidEGLWindow(AndroidEGLSupport *glsupport)
 		: EGLWindow(glsupport),
@@ -127,15 +129,16 @@
                 StringConverter::parseBool(opt->second))
             {
                 eglContext = eglGetCurrentContext();
-                if (eglContext)
+                if (not eglContext)
                 {
                     OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR,
                                 "currentGLContext was specified with no current GL context",
                                 "EGLWindow::create");
                 }
                 
-                eglContext = eglGetCurrentContext();
+                // eglContext = eglGetCurrentContext();
                 mEglSurface = eglGetCurrentSurface(EGL_DRAW);
+		mEglDisplay = mGLSupport->getGLDisplay();
             }
             
             
@@ -149,11 +152,11 @@
                 config = (AConfiguration*)(Ogre::StringConverter::parseInt(opt->second));
             }
             
-            int ctxHandle = -1;
+            // int ctxHandle = -1;
             if((miscParams->find("externalGLContext")) != end)
             {
                 mIsExternalGLControl = true;
-                ctxHandle = Ogre::StringConverter::parseInt(opt->second);
+                // ctxHandle = Ogre::StringConverter::parseInt(opt->second);
             }
 			
 			if((opt = miscParams->find("maxColourBufferSize")) != end)
@@ -192,12 +195,14 @@
         
         if (mEglSurface)
         {
+	  LogManager::getSingleton().logMessage("AndroidEGLWindow::create: Getting EGL config from drawable");
             mEglConfig = mGLSupport->getGLConfigFromDrawable (mEglSurface, &width, &height);
         }
         
         if (!mEglConfig && eglContext)
         {
-            mEglConfig = mGLSupport->getGLConfigFromContext(eglContext);
+	  LogManager::getSingleton().logMessage("AndroidEGLWindow::create: No config, getting it from context");
+	  mEglConfig = mGLSupport->getGLConfigFromContext(eglContext);
             
             if (!mEglConfig)
             {
@@ -212,13 +217,26 @@
         
         if (!mEglConfig)
         {
-			_createInternalResources(mWindow, config);
+	  LogManager::getSingleton().logMessage("AndroidEGLWindow::create: Still no config, creating internal resources");
+	  _createInternalResources(mWindow, config);
             mHwGamma = false;
         }
-        
-        mContext = createEGLContext();
-        mContext->setCurrent();
-		       
+
+	char tmp[1024];
+	
+	snprintf(tmp, sizeof(tmp), "AndroidEGLWindow::create: About to create EGL context (current = %p)", (void*)eglGetCurrentContext());
+	LogManager::getSingleton().logMessage(tmp);
+
+	mContext = createEGLContext();
+
+	snprintf(tmp, sizeof(tmp), "AndroidEGLWindow::create: Created (current = %p)", (void*)eglGetCurrentContext());
+	LogManager::getSingleton().logMessage(tmp);
+
+	mContext->setCurrent();
+
+	snprintf(tmp, sizeof(tmp), "AndroidEGLWindow::create: Set (current = %p)", (void*)eglGetCurrentContext());
+	LogManager::getSingleton().logMessage(tmp);
+	
         eglQuerySurface(mEglDisplay, mEglSurface, EGL_WIDTH, (EGLint*)&mWidth);
         eglQuerySurface(mEglDisplay, mEglSurface, EGL_HEIGHT, (EGLint*)&mHeight);
         EGL_CHECK_ERROR
@@ -357,4 +375,4 @@
             static_cast<GLES2RenderSystem*>(Ogre::Root::getSingletonPtr()->getRenderSystem())->resetRenderer(this);
         }
     }
-}
\ No newline at end of file
+}
diff -r dd30349ea667 RenderSystems/GLES2/src/EGL/OgreEGLContext.cpp
--- a/RenderSystems/GLES2/src/EGL/OgreEGLContext.cpp	Sun Dec 01 11:28:12 2013 -0600
+++ b/RenderSystems/GLES2/src/EGL/OgreEGLContext.cpp	Mon Dec 11 19:26:55 2017 +0100
@@ -69,7 +69,8 @@
         mConfig = glconfig;
         mEglDisplay = eglDisplay;
         
-        mContext = mGLSupport->createNewContext(mEglDisplay, mConfig, shareContext);
+        //mContext = mGLSupport->createNewContext(mEglDisplay, mConfig, shareContext);
+	mContext = eglGetCurrentContext();
         
         if (!mContext)
         {
diff -r dd30349ea667 RenderSystems/GLES2/src/OgreGLES2FBORenderTexture.cpp
--- a/RenderSystems/GLES2/src/OgreGLES2FBORenderTexture.cpp	Sun Dec 01 11:28:12 2013 -0600
+++ b/RenderSystems/GLES2/src/OgreGLES2FBORenderTexture.cpp	Mon Dec 11 19:26:55 2017 +0100
@@ -150,7 +150,8 @@
     };
     #define DEPTHFORMAT_COUNT (sizeof(depthFormats)/sizeof(GLenum))
 
-	GLES2FBOManager::GLES2FBOManager()
+    GLES2FBOManager::GLES2FBOManager():
+        mDefaultFBO(0)
     {
         detectFBOFormats();
         
@@ -503,7 +504,7 @@
             // The screen buffer is 1 on iOS
             OGRE_CHECK_GL_ERROR(glBindFramebuffer(GL_FRAMEBUFFER, 1));
 #else
-            OGRE_CHECK_GL_ERROR(glBindFramebuffer(GL_FRAMEBUFFER, 0));
+            OGRE_CHECK_GL_ERROR(glBindFramebuffer(GL_FRAMEBUFFER, mDefaultFBO));
 #endif
     }
     
@@ -572,4 +573,8 @@
 			}
 		}
     }
+
+    void GLES2FBOManager::setDefaultFBO(uint32 fbo) {
+        mDefaultFBO = fbo;
+    }
 }
diff -r dd30349ea667 RenderSystems/GLES2/src/OgreGLES2RenderSystem.cpp
--- a/RenderSystems/GLES2/src/OgreGLES2RenderSystem.cpp	Sun Dec 01 11:28:12 2013 -0600
+++ b/RenderSystems/GLES2/src/OgreGLES2RenderSystem.cpp	Mon Dec 11 19:26:55 2017 +0100
@@ -2409,4 +2409,9 @@
             attribsBound.push_back(attrib);
         }
     }
+
+    void GLES2RenderSystem::setDefaultFBO(uint32 fbo)
+    {
+        static_cast<GLES2FBOManager*>(mRTTManager)->setDefaultFBO(fbo);
+    }
 }
